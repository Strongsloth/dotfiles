---@type NvPluginSpec
-- Defines plugins for debugging with nvim-dap
local jslanguages = {
  "javascript",
  "typescript",
  "javascriptreact",
  "typescriptreact",
  "vue",
}

-- The file should return *one* table which is the plugin specification.
return {
  "mfussenegger/nvim-dap", -- Plugin name

  -- These fields should be *inside* this plugin's table
  dependencies = {
    "rcarriga/nvim-dap-ui", -- DAP UI extension
    "theHamsta/nvim-dap-virtual-text", -- Inline virtual text
    "nvim-neotest/nvim-nio",
    {
      "microsoft/vscode-js-debug",
      lazy = true,
      -- The build command compiles the debugger server.
      -- If you see an error like "Debugger entrypoint File ...vsDebugServer.js' does not exist",
      -- it means this build step likely failed because the process timed out during installation.
      -- *** FIX FOR TIMEOUT ERROR: ***
      -- Increase the 'build.timeout' setting in your main lazy.nvim configuration (e.g., init.lua).
      -- Example:
      -- require("lazy").setup({...}, { build = { timeout = 30000 } }) -- timeout in milliseconds
      -- Then run :Lazy clean vscode-js-debug and :Lazy sync in Neovim.
      build = "pnpm install && npx gulp vsDebugServerBundle && mv dist out",
      version = "1.*",
    },
    -- Required by dapui
    {
      "mxsdev/nvim-dap-vscode-js",
      config = function()
        ---@diagnostic disable-next-line: missing-fields
        require("dap-vscode-js").setup {
          -- Path of node executable. Defaults to $NODE_PATH, and then "node"
          node_path = "node",

          -- Path to vscode-js-debug installation.
          debugger_path = vim.fn.resolve(vim.fn.stdpath "data" .. "/lazy/vscode-js-debug"),

          -- Command to use to launch the debug server. Takes precedence over "node_path" and "debugger_path"
          debugger_cmd = { "js-debug-adapter" },

          -- which adapters to register in nvim-dap
          adapters = {
            "chrome",
            "pwa-node",
            "pwa-chrome",
            "pwa-msedge",
            "pwa-extensionHost",
            "node-terminal",
          },

          -- Path for file logging
          -- log_file_path = "(stdpath cache)/dap_vscode_js.log",

          -- Logging level for output to file. Set to false to disable logging.
          -- log_file_level = false,

          -- Logging level for output to console. Set to false to disable console output.
          -- log_console_level = vim.log.levels.ERROR,
        }
      end,
    },
    {
      "Joakker/lua-json5",
      -- This plugin has a PowerShell build script.
      -- If you encounter issues related to lua-json5, manually navigate to the plugin directory
      -- (C:\Users\Chuwi\AppData\Local\nvim-data\lazy\lua-json5\) and run "powershell ./install.ps1"
      -- in your terminal to see if the script executes successfully and check for errors.
      build = "powershell ./install.ps1",
    },
  },

  -- Define keys that will trigger the loading of nvim-dap
  -- and then execute the corresponding DAP function.
  keys = {
    -- Mode 'n' (normal mode) is the default for keys unless specified otherwise
    {
      "<Leader>dd",
      function()
        print "DAP Key: Continue"
        require("dap").continue()
      end,
      desc = "DAP: Continue",
    },
    {
      "<Leader>db",
      function()
        print "DAP Key: Toggle Breakpoint"
        require("dap").toggle_breakpoint()
      end,
      desc = "DAP: Toggle Breakpoint",
    },
    {
      "<Leader>dB",
      function()
        print "DAP Key: Set Conditional BP"
        require("dap").set_breakpoint(vim.fn.input "Breakpoint condition: ")
      end,
      desc = "DAP: Set Conditional Breakpoint",
    },
    {
      "<Leader>dl",
      function()
        print "DAP Key: Run Last"
        require("dap").run_last()
      end,
      desc = "DAP: Run Last Configuration",
    },
    {
      "<Leader>do",
      function()
        print "DAP Key: Step Over"
        require("dap").step_over()
      end,
      desc = "DAP: Step Over",
    },
    {
      "<Leader>di",
      function()
        print "DAP Key: Step Into"
        require("dap").step_into()
      end,
      desc = "DAP: Step Into",
    },
    {
      "<Leader>du",
      function()
        print "DAP Key: Step Out"
        require("dap").step_out()
      end,
      desc = "DAP: Step Out",
    },
    {
      "<Leader>dr",
      function()
        print "DAP Key: Open REPL"
        require("dap").repl.open()
      end,
      desc = "DAP: Open REPL",
    },
    {
      "<Leader>dU",
      function()
        print "DAP Key: Toggle UI"
        require("dapui").toggle()
      end,
      desc = "DAP: Toggle UI",
    },
    -- Test keymap to verify loading
    {
      "<Leader>dt",
      function()
        print "Attempting to load launch.json..."
        if vim.fn.filereadable ".vscode/launch.json" then
          local dap_vscode = require "dap.ext.vscode"
          dap_vscode.load_launchjs(nil, {
            ["pwa-node"] = jslanguages,
            ["node"] = jslanguages,
            ["chrome"] = jslanguages,
            ["pwa-chrome"] = jslanguages,
          })
          print "launch.json loaded. Attempting to continue (may need to launch manually)."
        else
          print "No .vscode/launch.json found."
        end
        -- Note: This will try to continue *without* starting a new session unless one is already active from the loaded launch.json.
        -- You might want a launch command here instead if the goal is to start based on launch.json.
        -- require("dap").continue()
        -- A more typical pattern might be to select a configuration from launch.json and then launch it.
        -- require("dap").list_configs() -- You could list configs first
        -- require("dap").launch(selected_config_name) -- Then launch a specific one
        -- For simplicity here, we'll just rely on the launch.json loading.
      end,
      desc = "Run with Args (via launch.json)",
    },
  },

  -- This config function runs *after* the plugin is loaded
  -- (which is triggered by pressing one of the keys defined above for the first time)
  config = function()
    -- Debug: Check if the config function runs after lazy loading
    print "--- Running nvim-dap config() ---"

    -- Use pcall for safety, though lazy.nvim should ensure they are loaded
    local dap_status, dap = pcall(require, "dap")
    local dapui_status, dapui = pcall(require, "dapui")
    local vt_status, vt = pcall(require, "nvim-dap-virtual-text")

    print("DAP require status:", dap_status)
    print("DAP UI require status:", dapui_status)
    print("Virtual Text require status:", vt_status)

    if not dap_status then
      print "Error: Failed to require nvim-dap in config"
      return
    end
    if not dapui_status then
      print "Error: Failed to require nvim-dap-ui in config"
      return
    end
    if not vt_status then
      print "Error: Failed to require nvim-dap-virtual-text in config"
      return
    end

    print "--- Required DAP modules loaded in config ---"

    -- Setup dapui
    dapui.setup {
      -- Add custom dapui config here if needed
    }
    print "--- dapui setup complete ---"

    -- Setup virtual text
    vt.setup {
      -- Add custom virtual-text config here if needed
    }
    print "--- virtual-text setup complete ---"

    -- Automatically open/close dapui on debug events
    -- These listeners only need to be set up once when the plugin config runs
    dap.listeners.before.attach.dapui_config = function()
      print "DAP listener: before.attach - opening UI"
      dapui.open()
    end
    dap.listeners.before.launch.dapui_config = function()
      print "DAP listener: before.launch - opening UI"
      dapui.open()
    end
    dap.listeners.before.event_terminated.dapui_config = function()
      print "DAP listener: before.event_terminated - closing UI"
      dapui.close()
    end
    dap.listeners.before.event_exited.dapui_config = function()
      print "DAP listener: before.event_exited - closing UI"
      dapui.close()
    end
    print "--- DAP listeners attached ---"

    -- Adapters: How DAP connects to debuggers
    ------------------------------- JS Adapters (handled by dap-vscode-js setup)
    ------------------------------- C/C++/Rust Adapter (lldb-dap or codelldb)

    -- JS configurations (using adapters registered by dap-vscode-js)
    for _, language in ipairs(jslanguages) do -- Corrected ipairs usage
      dap.configurations[language] = {
        -- Debug single nodejs files
        {
          type = "pwa-node",
          request = "launch",
          name = "Launch file",
          -- Add more print statements to see the resolved paths and confirm function execution
          program = function()
            print "Executing program function..."
            local file_path = vim.api.nvim_buf_get_name(0)
            print("vim.api.nvim_buf_get_name(0) returned:", vim.inspect(file_path)) -- Use vim.inspect for clarity
            -- If file_path is empty or invalid, you might need a fallback or error handling
            if file_path == "" or file_path == nil then
              print "Error: program path is empty or nil!"
              -- Consider returning nil or an empty string here if the file is not valid,
              -- although this might cause a different DAP error.
            end
            print("DAP Launch: program =", file_path)
            return file_path
          end,
          -- Changed cwd from "${workspaceFolder}" to vim.fn.getcwd()
          -- to potentially avoid a Vimscript error related to workspace folder resolution.
          -- If you still get ENOENT, verify the path of the file you are debugging
          -- and what vim.fn.getcwd() returns in that context.
          cwd = function()
            local cwd_path = vim.fn.getcwd()
            print("DAP Launch: cwd =", cwd_path)
            return cwd_path
          end,
          sourceMaps = true,
        },
        -- Debug nodejs processes (make sure to add --inspect when you run the process)
        {
          type = "pwa-node",
          request = "attach",
          name = "Attach",
          processId = require("dap.utils").pick_process,
          -- Changed cwd from "${workspaceFolder}" to vim.fn.getcwd()
          -- to potentially avoid a Vimscript error related to workspace folder resolution.
          cwd = vim.fn.getcwd(),
          sourceMaps = true,
        },
        -- Debug web applications (client side)
        {
          type = "pwa-chrome",
          request = "launch",
          name = "Launch & Debug Chrome",
          -- The 'url' field here expects a string or a function that returns a string *synchronously*.
          -- Interactive input like vim.ui.input is asynchronous and won't work directly here.
          -- If you need interactive launch, consider creating a separate keymap function that
          -- prompts for the URL first, then calls `require("dap").launch()`.
          -- For a simple launch, you can hardcode a common development URL or use a placeholder.
          url = "http://localhost:3000", -- Example placeholder URL
          webRoot = vim.fn.getcwd(), -- Consider using "${workspaceFolder}" here as well if your web root is relative to the workspace
          protocol = "inspector",
          sourceMaps = true,
          userDataDir = false,
        },
      }
    end
    print "--- JS configurations set ---"

    -- C/C++/Rust Adapters
    dap.adapters.lldb = {
      type = "executable",
      command = "C:/Program Files/LLVM/bin/lldb-dap.exe", -- Ensure path is correct
      name = "lldb",
    }
    dap.adapters.codelldb = {
      type = "executable",
      command = "codelldb", -- or if not in $PATH: "/absolute/path/to/codelldb"

      -- On windows you may have to uncomment this:
      detached = false,
    }
    print "--- DAP adapters configured ---"

    -- C/C++/Rust Configurations
    local cpp_c_rust_config = {
      name = "Launch file",
      type = "lldb", -- or "codelldb"
      request = "launch",
      program = function()
        -- This function prompts for the executable path, which is good for flexibility.
        -- Ensure the path entered here is correct and the executable exists.
        local program_path = vim.fn.input("Path to executable: ", vim.fn.getcwd() .. "/", "file")
        print("DAP Launch (C/C++/Rust): program =", program_path)
        return program_path
      end,
      -- Changed cwd from "${workspaceFolder}" to vim.fn.getcwd()
      -- to potentially avoid a Vimscript error related to workspace folder resolution.
      cwd = function()
        local cwd_path = vim.fn.getcwd()
        print("DAP Launch (C/C++/Rust): cwd =", cwd_path)
        return cwd_path
      end,
      stopOnEntry = false,
      args = {},
      -- console = "integratedTerminal",
    }

    dap.configurations.cpp = { cpp_c_rust_config }
    dap.configurations.c = { cpp_c_rust_config }
    dap.configurations.rust = { cpp_c_rust_config }
    print "--- C/C++/Rust configurations set ---"

    print "--- Finished nvim-dap config() ---"
  end, -- End of config function
} -- End of nvim-dap plugin spec table
